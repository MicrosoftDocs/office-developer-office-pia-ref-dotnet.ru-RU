<Type Name="IRibbonUI" FullName="Microsoft.Office.Core.IRibbonUI">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f912fe8c8db15a87c031bae5d14f2fe64d719567" /><Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/19/2018" /><Meta Name="ms.locfileid" Value="20662102" /></Metadata><TypeSignature Language="C#" Value="public interface IRibbonUI" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonUI" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonUI" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonUI" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonUI" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C03A7-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="fda44-101">Объект, возвращаемый процедурой <b>OnLoad</b> , указанной в теге <b>customUI</b> .</span><span class="sxs-lookup"><span data-stu-id="fda44-101">The object that is returned by the <b>onLoad</b> procedure specified on the <b>customUI</b> tag.</span></span>  <span data-ttu-id="fda44-102">Объект содержит методы для аннулирования свойств элемента управления и для обновления пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="fda44-102">The object contains methods for invalidating control properties and for refreshing the user interface.</span></span></summary>
    <remarks><span data-ttu-id="fda44-103"><para>Пользовательский интерфейс ленты можно настроить с помощью процедур обратного вызова в надстройках COM. При запуске ведущего приложения вызывается процедура обратного вызова <b>OnLoad</b> .  Затем процедура обратного вызова возвращает объект <b>IRibbonUI</b> , указывающий на пользовательский интерфейс. Этот объект можно использовать для вызова методов <b>аннулирования</b>, <b>инвалидатеконтрол</b>и <b>Refresh</b> .</para>
      <para /></span><span class="sxs-lookup"><span data-stu-id="fda44-103"><para>You can customize the Ribbon user interface (UI) by using callback procedures in COM add-ins. When the host application starts, the <b>onLoad</b> callback procedure is called.  The callback procedure then returns a <b>IRibbonUI</b> object pointing to the user interface (UI). YOu can use that object to invoke the <b>Invalidate</b>, <b>InvalidateControl</b>, and <b>Refresh</b> methods.</para>
      <para /></span></span></remarks>
    <example><span data-ttu-id="fda44-104"><para>В следующем примере запуск ведущего приложения вызывает процедуру <b>OnLoad</b> , которая затем вызывает процедуру, которая создает объект <b>IRibbonUI</b> , представляющий пользовательский интерфейс ленты.  Затем определяется процедура обратного вызова, которая делает недействительными все кэшированные элементы управления и обновляет пользовательский интерфейс.</para> 
      <para>Ниже приведена XML-разметка для загрузки настраиваемой ленты в Office:</para>
      <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
      <para>ниже приведен метод обратного вызова для события <b>OnLoad</b> :</para>
      <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code></span><span class="sxs-lookup"><span data-stu-id="fda44-104"><para>In the following example, starting the host application triggers the <b>onLoad</b> event procedure  that then calls a procedure which creates a <b>IRibbonUI</b> object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates all of the cached controls and then refreshes the UI.</para>
      <para>The following is the XML markup for Office to load the custom ribbon:</para>
      <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
      <para>The following is the callback method for the <b>onLoad</b> event:</para>
      <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code></span></span></example>
  </Docs>
  <Members>
    <Member MemberName="ActivateTab">
      <MemberSignature Language="C#" Value="public void ActivateTab (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTab([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTab(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTab (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTab(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID"><span data-ttu-id="fda44-105">Указывает идентификатор настраиваемой вкладки ленты, которую необходимо активировать.</span><span class="sxs-lookup"><span data-stu-id="fda44-105">Specifies the identifier of the custom Ribbon tab to be activated.</span></span></param>
        <summary><span data-ttu-id="fda44-106">Активирует указанную настраиваемую вкладку.</span><span class="sxs-lookup"><span data-stu-id="fda44-106">Activates the specified custom tab.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabMso">
      <MemberSignature Language="C#" Value="public void ActivateTabMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID"><span data-ttu-id="fda44-107">Указывает идентификатор настраиваемой вкладки ленты, которую необходимо активировать.</span><span class="sxs-lookup"><span data-stu-id="fda44-107">Specifies the identifier of the custom Ribbon tab to be activated.</span></span></param>
        <summary><span data-ttu-id="fda44-108">Активирует указанную встроенную вкладку.</span><span class="sxs-lookup"><span data-stu-id="fda44-108">Activates the specified built-in tab.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabQ">
      <MemberSignature Language="C#" Value="public void ActivateTabQ (string ControlID, string Namespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabQ([in]string ControlID, [in]string Namespace) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabQ(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabQ (ControlID As String, Namespace As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabQ(System::String ^ ControlID, System::String ^ Namespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
        <Parameter Name="Namespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID"><span data-ttu-id="fda44-109">Указывает идентификатор настраиваемой вкладки ленты, которую необходимо активировать.</span><span class="sxs-lookup"><span data-stu-id="fda44-109">Specifies the identifier of the custom Ribbon tab to be activated.</span></span></param>
        <param name="Namespace"><span data-ttu-id="fda44-110">Задает пространство имен элемента Tab.</span><span class="sxs-lookup"><span data-stu-id="fda44-110">Specifies the namespace of the tab element.</span></span></param>
        <summary><span data-ttu-id="fda44-111">Активирует указанную настраиваемую вкладку в пользовательском интерфейсе ленты Microsoft Office Fluent.</span><span class="sxs-lookup"><span data-stu-id="fda44-111">Activates the specified custom tab on the Microsoft Office Fluent Ribbon UI.</span></span> <span data-ttu-id="fda44-112">Использует полное имя вкладки, включающее идентификатор и пространство имен вкладки.</span><span class="sxs-lookup"><span data-stu-id="fda44-112">Uses the fully qualified name of the tab which includes the identifier and the namespace of the tab.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fda44-113">Делает недействительными кэшированные значения для всех элементов управления пользовательского интерфейса ленты.</span><span class="sxs-lookup"><span data-stu-id="fda44-113">Invalidates the cached values for all of the controls of the Ribbon user interface.</span></span></summary>
        <remarks><span data-ttu-id="fda44-114"><para>Пользовательский интерфейс ленты можно настроить с помощью процедур обратного вызова в надстройках COM. Для каждого из обратных вызовов, реализуемых надстройкой, ответы кэшируются.  Например, если разработчик надстройки реализует <b>процедуру обратного</b> вызова для кнопки, она вызывается один раз, загружает изображение, а затем, если изображение нуждается в обновлении, вместо отзыва процедуры используется кэшированное изображение. Этот процесс остается на месте до тех пор, пока надстройка не подает сигнал о том, что кэшированные значения не являются недопустимыми с помощью метода <b>аннулирования</b> , после чего снова вызывается процедура обратного вызова и выполняется кэширование возвращаемого ответа.  Затем надстройка может выполнить немедленное обновление пользовательского интерфейса, вызвав метод <b>Refresh</b> .</para>
          <para /></span><span class="sxs-lookup"><span data-stu-id="fda44-114"><para>You can customize the Ribbon UI by using callback procedures in COM add-ins. For each of the callbacks the add-in implements, the responses are  cached.  For example, if an add-in writer implements the <b>getImage</b> callback procedure for a button, the function is  called once, the image loads, and then if the image needs to be updated, the cached image is used instead of recalling the procedure. This process remains in-place until the add-in signals that the cached values are invalid by using the <b>Invalidate</b> method,  at which time, the callback procedure is again called and the return response is cached.  The add-in can then force an immediate update of the UI by calling the <b>Refresh</b> method.</para>
          <para /></span></span></remarks>
        <example><span data-ttu-id="fda44-115"><para>В следующем примере запуск ведущего приложения запускает процедуру <b>OnLoad</b> , которая затем вызывает процедуру, которая создает объект, представляющий пользовательский интерфейс ленты.  Затем определяется процедура обратного вызова, которая делает недействительными все элементы управления в пользовательском интерфейсе, а затем обновляет пользовательский интерфейс.</para> 
          <para>Ниже приведена XML-разметка для загрузки настраиваемой ленты в Office:</para>
          <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
          <para>ниже приведен метод обратного вызова для события <b>OnLoad</b> :</para>
          <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code></span><span class="sxs-lookup"><span data-stu-id="fda44-115"><para>In the following example,  starting the host application triggers the <b>onLoad</b> event  procedure that then calls a procedure which creates an object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates all of the controls on the UI and then refreshes the UI.</para>
          <para>The following is the XML markup for Office to load the custom ribbon:</para>
          <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
          <para>The following is the callback method for the <b>onLoad</b> event:</para>
          <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code></span></span></example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControl">
      <MemberSignature Language="C#" Value="public void InvalidateControl (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControl([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControl (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControl(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID"><span data-ttu-id="fda44-116">Указывает идентификатор элемента управления, который будет недействительным.</span><span class="sxs-lookup"><span data-stu-id="fda44-116">Specifies the ID of the control that will be invalidated.</span></span></param>
        <summary><span data-ttu-id="fda44-117">Делает недействительным кэшированное значение для одного элемента управления в пользовательском интерфейсе ленты.</span><span class="sxs-lookup"><span data-stu-id="fda44-117">Invalidates the cached value for a single control on the Ribbon user interface.</span></span></summary>
        <remarks><span data-ttu-id="fda44-118"><para>Пользовательский интерфейс ленты можно настроить с помощью процедур обратного вызова в надстройках COM. Для каждого из обратных вызовов, реализуемых надстройкой, ответы кэшируются.  Например, если разработчик надстройки реализует <b>процедуру обратного</b> вызова для кнопки, она вызывается один раз, загружает изображение, а затем, если изображение нуждается в обновлении, вместо отзыва процедуры используется кэшированное изображение. Этот процесс остается на месте для элемента управления до тех пор, пока надстройка не подает сигнал о том, что кэшированные значения не являются недопустимыми с помощью метода <b>инвалидатеконтрол</b> , после чего снова вызывается процедура обратного вызова и кэшируется возвращаемый ответ.</para>
          <para /></span><span class="sxs-lookup"><span data-stu-id="fda44-118"><para>You can customize the Ribbon UI by using callback procedures in COM add-ins. For each of the callbacks the add-in implements, the responses are  cached.  For example, if an add-in writer implements the <b>getImage</b> callback procedure for a button, the function is  called once, the image loads, and then if the image needs to be updated, the cached image is used instead of recalling the procedure. This process remains in-place for the control until the add-in signals that the cached values are invalid by using the <b>InvalidateControl</b> method,  at which time, the callback procedure is again called and the return response is cached.</para>
          <para /></span></span></remarks>
        <example><span data-ttu-id="fda44-119"><para>В следующем примере запуск ведущего приложения запускает процедуру <b>OnLoad</b> , которая затем вызывает процедуру, которая создает объект, представляющий пользовательский интерфейс ленты.  Затем определяется процедура обратного вызова, которая делает недействительным элемент управления в пользовательском интерфейсе, а затем обновляет пользовательский интерфейс.</para> 
          <para>Ниже приведена XML-разметка для загрузки настраиваемой ленты в Office:</para>
          <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
          <para>ниже приведен метод обратного вызова для события <b>OnLoad</b> :</para>
          <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code></span><span class="sxs-lookup"><span data-stu-id="fda44-119"><para>In the following example,  starting the host application triggers the <b>onLoad</b> event procedure that then calls a procedure which creates an object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates a control on the UI and then refreshes the UI.</para>
          <para>The following is the XML markup for Office to load the custom ribbon:</para>
          <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
          <para>The following is the callback method for the <b>onLoad</b> event:</para>
          <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code></span></span></example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControlMso">
      <MemberSignature Language="C#" Value="public void InvalidateControlMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControlMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControlMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControlMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControlMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID"><span data-ttu-id="fda44-120">Задает идентификатор элемента управления, который будет недействительным.</span><span class="sxs-lookup"><span data-stu-id="fda44-120">Specified the identifier of the control that will be invalidated.</span></span></param>
        <summary><span data-ttu-id="fda44-121">Используется для аннулирования встроенного элемента управления.</span><span class="sxs-lookup"><span data-stu-id="fda44-121">Used to invalidate a built-in control.</span></span></summary>
        <remarks><span data-ttu-id="fda44-122"><para>Неподтвержденный элемент управления перерисовывает экран и вызывает выполнение всех процедур обратного вызова, связанных с этим элементом управления.</para>
          <para /></span><span class="sxs-lookup"><span data-stu-id="fda44-122"><para>Invalidating a control repaints the screen and causes any callback procedures associated with that control to run.</para>
          <para /></span></span></remarks>
      </Docs>
    </Member>
  </Members>
</Type>