<Type Name="IRibbonControl" FullName="Microsoft.Office.Core.IRibbonControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68773fd86e42dc3132be028386c9b8eeaf465f51" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20662399" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonControl" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonControl" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C0395-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет объект, который был передан в процедуру обратного вызова каждые ленты пользовательского интерфейса (UI) элемента управления.</summary>
    <remarks>
      <para>Объект <b>IRibbonControl</b> содержит имя (идентификатор) элемента управления и текущего объекта <b>Window</b> для элемента управления пользовательского интерфейса ленты.</para>
      <para />
    </remarks>
    <example>
      <para>В следующем примере, написанном на языке C# показаны две процедуры, вызов выполняется из процедуру события <b>onAction</b> элемента управления Button и элемент управления ToggleButton. В первой процедуре <b>IRibbonControl</b> объект, представляющий элемент управления передается в процедуру и отображается окно сообщения, указывающего на то, что кнопка была нажата клавиша совместно с Идентификатором кнопки. Во второй процедуре аналогичен первому с добавлением <b>логический</b> параметр, указывающего на то, что кнопка была нажата.</para>
      <code>&lt;span class="label"&gt;public void ButtonOnAction(IRibbonControl control) 
   MessageBox.Show("Button clicked: " + control.Id); 
} 
 
public void ToggleButtonOnAction(IRibbonControl control, bool pressed) 
{ 
 
 
...if (pressed) 
 
      MessageBox.Show("ToggleButton was switched on."); 
 
 
   else 
      MessageBox.Show("ToggleButton was switched off."); 
 
}&lt;/span&gt;</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public object Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Context { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет активное окно, содержащий пользовательский интерфейс ленты, который запускает процедуру обратного вызова. Только для чтения.</summary>
        <value>Объект</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает идентификатор элемента управления, указанных в файле параметров разметки XML-ленты. Только для чтения.</summary>
        <value>String</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public string Tag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Tag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Tag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Используется для хранения произвольных строк и извлечь их во время выполнения. Только для чтения</summary>
        <value>String</value>
        <remarks>
          <para>Обычно может различать элементы управления в ленте пользовательского интерфейса файл настройки XML с помощью свойства <b>Id</b> . Тем не менее, существуют ограничения на идентификаторы, которые могут содержать (отсутствуют не являющиеся буквенно-цифровых символов и они должны быть уникальным).  Свойство <b>Tag</b> не имеет следующие ограничения и поэтому его можно использовать в следующих ситуациях, где идентификатор не работает:</para>
          <list type="bullet">
            <item>
              <para>, если необходимо сохранить специальные строку с элементом управления, такие как имя файла.  Например: tag="C:\path\file.xlsm.»</para>
            </item>
            <item>
              <para>, Если вы хотите, чтобы несколько элементов управления могут быть обрабатываются так же, как с вашей процедуры обратного вызова, но вы не хотите поддерживать список всех своих идентификаторы (которые должно быть уникальным).  К примеру, может иметь кнопок на различных вкладок на ленте, с tag = «blue» и только проверка свойство <b>Tag</b> вместо свойства <b>ID</b> при perfroming некоторых распространенных операций.</para>
            </item>
          </list>
          <para />
          <para />
        </remarks>
        <example>
          <para>В XML, используемый для настройки пользовательского интерфейса ленты можно задать тег следующим образом. При вызове действие MyFunction могут читать свойства <b>Tag</b> , которое будет равен «некоторые string».</para>
          <code>&lt;span class="label"&gt;&amp;lt;button id=”mybutton” tag=”some string” onAction=”MyFunction”/&amp;gt;&lt;/span&gt;</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>