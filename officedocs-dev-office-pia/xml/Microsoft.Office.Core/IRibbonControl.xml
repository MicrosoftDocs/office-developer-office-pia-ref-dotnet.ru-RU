<Type Name="IRibbonControl" FullName="Microsoft.Office.Core.IRibbonControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="68773fd86e42dc3132be028386c9b8eeaf465f51" /><Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/19/2018" /><Meta Name="ms.locfileid" Value="20662399" /></Metadata><TypeSignature Language="C#" Value="public interface IRibbonControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonControl" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonControl" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C0395-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d2f1e-101">Представляет объект, передаваемый в каждую процедуру обратного вызова элемента управления ПОЛЬЗОВАТЕЛЬСКОГО интерфейса ленты.</span><span class="sxs-lookup"><span data-stu-id="d2f1e-101">Represents the object passed into every Ribbon user interface (UI) control's callback procedure.</span></span></summary>
    <remarks><span data-ttu-id="d2f1e-102"><para>Объект <b>IRibbonControl</b> содержит имя (ID) элемента управления и текущий объект <b>Window</b> для элемента управления пользовательского интерфейса ленты.</para>
      <para /></span><span class="sxs-lookup"><span data-stu-id="d2f1e-102"><para>The <b>IRibbonControl</b> object  contains the name (ID) of the control and the current <b>Window</b> object for the Ribbon UI control.</para>
      <para /></span></span></remarks>
    <example><span data-ttu-id="d2f1e-103"><para>В следующем примере, написанном на языке C#, показаны две процедуры, вызываемые из процедуры события <b>onAction</b> элемента управления "Кнопка" и элемента управления ToggleButton. В первой процедуре объект <b>IRibbonControl</b> , представляющий элемент управления, передается в процедуру, и отображается окно сообщения с указанием на то, что кнопка нажата, а также идентификатор кнопки. Вторая процедура аналогична первой, с добавлением <b>логического</b> параметра, указывающим, что нажата кнопка.</para>
      <code>&lt;span class="label"&gt;public void ButtonOnAction(IRibbonControl control) 
   MessageBox.Show("Button clicked: " + control.Id); 
} 
 
public void ToggleButtonOnAction(IRibbonControl control, bool pressed) 
{ 
 
 
...if (pressed) 
 
      MessageBox.Show("ToggleButton was switched on."); 
 
 
   else 
      MessageBox.Show("ToggleButton was switched off."); 
 
}&lt;/span&gt;</code></span><span class="sxs-lookup"><span data-stu-id="d2f1e-103"><para>The following example, written in C#,  shows two procedures called from the <b>onAction</b> event procedure  of a Button control and a ToggleButton control. In the first procedure, the <b>IRibbonControl</b> object representing the control is passed into the procedure and a message box is displayed indicating that the button was pressed along with the ID of the button. The second procedure is similar to the first with the addition of a <b>Boolean</b> parameter indicating that the button was pressed.</para>
      <code>&lt;span class="label"&gt;public void ButtonOnAction(IRibbonControl control) 
   MessageBox.Show("Button clicked: " + control.Id); 
} 
 
public void ToggleButtonOnAction(IRibbonControl control, bool pressed) 
{ 
 
 
...if (pressed) 
 
      MessageBox.Show("ToggleButton was switched on."); 
 
 
   else 
      MessageBox.Show("ToggleButton was switched off."); 
 
}&lt;/span&gt;</code></span></span></example>
  </Docs>
  <Members>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public object Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Context { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d2f1e-104">Представляет активное окно, содержащее пользовательский интерфейс ленты, который запускает процедуру обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="d2f1e-104">Represents the active window containing the Ribbon user interface that triggers a callback procedure.</span></span> <span data-ttu-id="d2f1e-105">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d2f1e-105">Read-only.</span></span></summary>
        <value><span data-ttu-id="d2f1e-106">Объект</span><span class="sxs-lookup"><span data-stu-id="d2f1e-106">Object</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d2f1e-107">Получает идентификатор элемента управления, указанного в файле настройки разметки XML ленты.</span><span class="sxs-lookup"><span data-stu-id="d2f1e-107">Gets the ID of the control specified in the Ribbon XML markup customization file.</span></span> <span data-ttu-id="d2f1e-108">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d2f1e-108">Read-only.</span></span></summary>
        <value><span data-ttu-id="d2f1e-109">String</span><span class="sxs-lookup"><span data-stu-id="d2f1e-109">String</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public string Tag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Tag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Tag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d2f1e-110">Используется для хранения произвольных строк и их извлечения во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="d2f1e-110">Used to store arbitrary strings and fetch them at runtime.</span></span> <span data-ttu-id="d2f1e-111">Только для чтения</span><span class="sxs-lookup"><span data-stu-id="d2f1e-111">Read-only</span></span></summary>
        <value><span data-ttu-id="d2f1e-112">String</span><span class="sxs-lookup"><span data-stu-id="d2f1e-112">String</span></span></value>
        <remarks><span data-ttu-id="d2f1e-113"><para>Как правило, вы можете отличать элементы управления в файле настройки XML пользовательского интерфейса ленты с помощью свойства <b>ID</b> . Тем не менее, существуют ограничения на идентификаторы, которые могут содержаться (без буквенно-цифровых символов, и все они должны быть уникальными).  У свойства <b>Tag</b> нет этих ограничений, поэтому его можно использовать в следующих ситуациях, где идентификатор не работает:</para>
          <list type="bullet">
            <item>
              <para>Если вам нужно сохранить специальную строку с элементом управления, например именем файла.  Например: TAG = "К:\пас\филе.кслсм."</para>
            </item> 
            <item>
              <para>Если требуется, чтобы несколько элементов управления считались процедурами обратного вызова одним и тем же способом, но не нужно поддерживать список всех их идентификаторов (которые должны быть уникальными).  Например, можно использовать кнопки на разных вкладках ленты, все с тегом "Blue", а затем просто проверить свойство <b>Tag</b> , а не свойство <b>ID</b> при перфроминг некоторых типовых действий.</para>
            </item> 
          </list>
          <para />
          <para /></span><span class="sxs-lookup"><span data-stu-id="d2f1e-113"><para>Normally you can distinguish between controls in a Ribbon user interface XML customization file using the <b>Id</b> property. However, there are restrictions on what IDs can contain (no non-alphanumeric characters, and they must all be unique).  The <b>Tag</b> property doesn’t have these restrictions and so it can be used in the following situations, where ID doesn’t work:</para>
          <list type="bullet">
            <item>
              <para>If you need to store a special string with your control such as a filename.  For example: tag=”C:\path\file.xlsm.”</para>
            </item>
            <item>
              <para>If you want multiple controls to be treated the same way by your callback procedures, but you don’t want to maintain a list of all of their IDs (which must be unique).  For example, you could have buttons on different tabs on the Ribbon, all with tag=”blue”, and then just check the <b>Tag</b> property instead of the <b>ID</b> property when perfroming some common action.</para>
            </item>
          </list>
          <para />
          <para /></span></span></remarks>
        <example><span data-ttu-id="d2f1e-114"><para>В XML-коде, используемом для настройки пользовательского интерфейса ленты, можно установить тег следующим образом. При вызове действия MyFunction можно прочитать свойство <b>Tag</b> , которое будет равно "some String".</para>
          <code>&lt;span class="label"&gt;&amp;lt;button id=”mybutton” tag=”some string” onAction=”MyFunction”/&amp;gt;&lt;/span&gt;</code></span><span class="sxs-lookup"><span data-stu-id="d2f1e-114"><para>In the  XML used to customize the Ribbon user interface, you can set a tag as follows. When the MyFunction action is called, you can read the <b>Tag</b> property, which will be equal to “some string”. </para>
          <code>&lt;span class="label"&gt;&amp;lt;button id=”mybutton” tag=”some string” onAction=”MyFunction”/&amp;gt;&lt;/span&gt;</code></span></span></example>
      </Docs>
    </Member>
  </Members>
</Type>